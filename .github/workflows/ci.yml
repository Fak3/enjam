name: Tests

on:
  workflow_call:
  workflow_dispatch:
  pull_request:
    branches:
      - main
    paths-ignore:
      - "docs/**"
      - "*.md"
  push:
    branches:
      - main
    paths-ignore:
      - "docs/**"
      - "*.md"

concurrency:
  group: ${{ github.event.number || github.run_id }}
  cancel-in-progress: true

jobs:
  Testing:
    env:
      PYTHONDEVMODE: 1
      PYTHONWARNINGS: "ignore"
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.11", "3.12.6"]
        # os: [ubuntu-latest, windows-latest, macos-latest]
        os: [ubuntu-latest, windows-latest]
        ffmpeg-version: ["6.1", "7.1"]
    steps:
      - uses: actions/checkout@v4

      - name: Setup FFmpeg
        uses: AnimMouse/setup-ffmpeg@v1
        with:
          version: ${{ matrix.ffmpeg-version }}

      # - name: Setup ffmpeg ${{ matrix.ffmpeg-version }}
      #   uses: FedericoCarboni/setup-ffmpeg@v3
      #   with:
      #     ffmpeg-version: ${{ matrix.ffmpeg-version }}
      #     architecture: 'x64'
      #     linking-type: static

      - name: Setup Python Versions
        uses: actions/setup-python@v5
        with:
          python-version: |
            3.11
            3.12
        if: matrix.os != 'macos-latest'
      - name: Setup Python Versions
        uses: actions/setup-python@v5
        with:
          python-version: |
            3.11
            3.12
        if: matrix.os == 'macos-latest'
      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: pip
          allow-prereleases: true

      - name: Cache venv
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('pdm.lock') }}
      - name: Install PDM via pip
        run: python -m pip install pdm

      - name: Install Dev Dependencies
        run: |
          pdm install -v -dGtest
          pdm run pip install -U setuptools
          pdm info

      - name: Run Tests
        run: |
          pdm run pytest --doctest-modules -n auto --cov --cov-config=pyproject.toml --cov-report=xml --cov-report=json

      - name: Calculate total coverage
        run: |
          export TOTAL=$(python -c "import json;print(json.load(open('coverage.json'))['totals']['percent_covered_display'])")
          echo "total=$TOTAL" >> $GITHUB_ENV
        if: matrix.os != 'windows-latest'

      - name: "Make badge"
        uses: schneegans/dynamic-badges-action@v1.4.0
        if: matrix.os != 'windows-latest'
        with:
          # GIST_TOKEN is a GitHub personal access token with scope "gist".
          auth: ${{ secrets.GIST_TOKEN }}
          gistID: 2f003eb465b548b6bb6a551ae46c8e13   # replace with your real Gist id.
          filename: covbadge.json
          label: Coverage
          message: ${{ env.total }}%
          minColorRange: 50
          maxColorRange: 90
          valColorRange: ${{ env.total }}

      - name: Upload results to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage.xml
